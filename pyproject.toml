[tool.poetry]
name = "event-horizon"
version = "0.0.0"
description = "BPL Internal Admin Site"
authors = ["Bink <bink@bink.bink>"]
readme = "README.md"
packages = [{ include = "event_horizon" }]
repository = "https://github.com/binkhq/event-horizon"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[[tool.poetry.source]]
name = "azure"
url = "https://pkgs.dev.azure.com/binkhq/_packaging/binkhq/pypi/simple/"
priority = "explicit"

[tool.poetry.dependencies]
python = "^3.10"
Flask = "^2.2.2"
Flask-Admin = "^1.6.0"
psycopg2-binary = "^2.9.3"
Authlib = "^1.1.0"
requests = "^2.28.1"
python-dotenv = "^0.21.0"
SQLAlchemy = "^1.4.41"
PyYAML = "^6.0"
pydantic = "^1.10.2"
azure-keyvault = "^4.2.0"
azure-identity = "^1.11.0"
sentry-sdk = { extras = ["flask"], version = "^1.9.9" }
gunicorn = "^20.1.0"
redis = "^4.3.4"
rq = "^1.11.1"
Flask-WTF = "^1.0.1"
retry-tasks-lib = { version = "^2.2.1", source = "azure" }
cosmos-message-lib = { version = "^1.3.0", source = "azure" }
babel = "^2.10.3"
cryptography = "^38.0.3"                                      # patches openssl vuln
python-decouple = "^3.8"
tzdata = "^2023.4"

[tool.poetry.group.dev.dependencies]
mypy = "^1.2.0"
black = "^22.8.0"
isort = "^5.10.1"
pytest = "^7.1.3"
pytest-cov = "^3.0.0"
xenon = "^0.9.0"
types-Flask = "^1.1.6"
types-PyYAML = "^6.0.12"
types-redis = "^4.3.21"
types-requests = "^2.28.11"
httpretty = "^1.1.4"
pytest-mock = "^3.8.2"
ipython = "^8.5.0"
refurb = "^1.9.0"
ruff = "^0.0.262"

[tool.poetry-dynamic-versioning]
enable = true

[tool.poetry-dynamic-versioning.substitution]
files = ['event_horizon/version.py']

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
lines_between_types = 1

[tool.mypy]
disallow_untyped_defs = true
show_error_codes = true
warn_unused_ignores = true
ignore_missing_imports = true
plugins = ["pydantic.mypy", "sqlalchemy.ext.mypy.plugin"]

[tool.ruff]
line-length = 120
show-source = true
target-version = "py310"
select = [
    "F",   # Pyflakes (F)
    "E",
    "W",   # pycodestyle (E, W)
    "C90", # mccabe (C90)
    # isort (I)
    # pydocstyle (D)
    "UP",  # pyupgrade (UP)
    "N",   # pep8-naming (N)
    "YTT", # flake8-2020 (YTT)
    "ANN", # flake8-annotations (ANN)
    "S",   # flake8-bandit (S)
    "BLE", # flake8-blind-except (BLE)
    # flake8-boolean-trap (FBT)
    "B",   # flake8-bugbear (B)
    "A",   # flake8-builtins (A)
    "C4",  # flake8-comprehensions (C4)
    "T10", # flake8-debugger (T10)
    # flake8-errmsg (EM)
    "ICN", # flake8-import-conventions (ICN)
    "T20", # flake8-print (T20)
    # "PT",   # flake8-pytest-style (PT)
    "Q", # flake8-quotes (Q)
    # flake8-return (RET)
    "SIM", # flake8-simplify (SIM)
    "TID", # flake8-tidy-imports (TID)
    "ARG", # flake8-unused-arguments (ARG)
    "DTZ", # flake8-datetimez (DTZ)
    "ERA", # eradicate (ERA) until we can remove commented out code this has to stay deactivated
    # pandas-vet (PD)
    # pygrep-hooks (PGH)
    "PLC",
    "PLE",
    "PLR",
    "PLW", # Pylint (PLC, PLE, PLR, PLW)
    "RUF", # Ruff-specific rules (RUF)
]
ignore = [
    "ANN101",  # Missing type annotation for `self`
    "ANN102",  # Missing type annotation for `cls`
    "A003",    # Shadowing a python builtin
    "PLR2004", # Magic value used in comparison
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "BLE001",  # Do not catch blind exception: `Exception`
    "ARG005",  # Unused lambda argument
    "ARG001",  # Unused function argument
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "S105", "S311", "B018"]

[tool.refurb]
ignore = [
    "FURB184", # some chaining suggestions don't make sense
    "FURB111", # conflicts with sync and async run query
]
