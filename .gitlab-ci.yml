stages:
  - test
  - build
  - deploy

default:
  image: ghcr.io/binkhq/python:3.9

test:pytest:
  stage: test
  variables:
    POSTGRES_DB: polaris
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: ""
    POSTGRES_HOST_AUTH_METHOD: trust
    POLARIS_DATABASE_URI: "postgresql://postgres@postgres:5432/polaris"
    VELA_DATABASE_URI: "postgresql://postgres@postgres:5432/vela"
    EVENT_HORIZON_CLIENT_SECRET: "unused-for-tests"
    SECRET_KEY: "not-the-real-key"
  before_script: &setup
    - pipenv install --dev --system --deploy --ignore-pipfile
    - pip freeze
  script:
    - pytest --verbose --cov app --cov-report term-missing
  services:
    - postgres:latest

test:complexity:
  stage: test
  before_script: *setup
  script:
    - xenon --max-average A --max-modules B --max-absolute B .

test:style:
  stage: test
  before_script: *setup
  script:
    - flake8
    - black --line-length 120 --check .
    - isort --check --line-length 120 --profile black .

test:type-check:
  stage: test
  before_script: *setup
  script:
    - mypy --config-file .mypy.ini app tests

build:develop:
  stage: build
  needs: ["test:pytest", "test:complexity", "test:style", "test:type-check"]
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - docker build --pull --tag "$CI_REGISTRY/$CI_PROJECT_NAME:$CI_PIPELINE_CREATED_AT" .
    - docker push "$CI_REGISTRY/$CI_PROJECT_NAME:$CI_PIPELINE_CREATED_AT"
  only:
    - develop

build:tag:
  stage: build
  needs: ["test:pytest", "test:complexity", "test:style", "test:type-check"]
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - docker build --pull --tag "$CI_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_TAG" .
    - docker push "$CI_REGISTRY/CI_PROJECT_NAME:$CI_COMMIT_TAG"
  only:
    - tags

deploy:dev:
  stage: deploy
  needs: ["build:develop"]
  image: binkops.azurecr.io/tagbot:latest
  environment:
    name: dev
  script:
    - tagbot
      --username "$CI_REGISTRY_USER"
      --password "$CI_REGISTRY_PASSWORD"
      --source "$CI_REGISTRY/$CI_PROJECT_NAME:$CI_PIPELINE_CREATED_AT"
      --tag "$CI_ENVIRONMENT_NAME-$CI_PIPELINE_CREATED_AT"
    - tagbot
      --username "$CI_REGISTRY_USER"
      --password "$CI_REGISTRY_PASSWORD"
      --source "$CI_REGISTRY/$CI_PROJECT_NAME:$CI_PIPELINE_CREATED_AT"
      --tag "$CI_ENVIRONMENT_NAME"
  only:
    - develop

deploy:staging:
  stage: deploy
  needs: ["build:tag"]
  image: binkops.azurecr.io/tagbot:latest
  environment:
    name: staging
  script:
    - tagbot
      --username "$CI_REGISTRY_USER"
      --password "$CI_REGISTRY_PASSWORD"
      --source "$CI_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_TAG"
      --tag "$CI_ENVIRONMENT_NAME"
    - tagbot
      --username "$CI_REGISTRY_USER"
      --password "$CI_REGISTRY_PASSWORD"
      --source "$CI_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_TAG"
      --tag "$CI_ENVIRONMENT_NAME-$CI_COMMIT_TAG"
  only:
    - tags

deploy:prod:
  stage: deploy
  needs: ["build:tag"]
  image: binkops.azurecr.io/tagbot:latest
  environment:
    name: prod
  script:
    - tagbot
      --username "$CI_REGISTRY_USER"
      --password "$CI_REGISTRY_PASSWORD"
      --source "$CI_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_TAG"
      --tag "CI_ENVIRONMENT_NAME"
    - tagbot
      --username "$CI_REGISTRY_USER"
      --password "$CI_REGISTRY_PASSWORD"
      --source "$CI_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_TAG"
      --tag "CI_ENVIRONMENT_NAME-$CI_COMMIT_TAG"
  when: manual
  only:
    - tags
